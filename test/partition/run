#!/bin/bash

trap '
  trap - INT # restore default INT handler
  kill -s INT "$$"
' INT

# get hugin file
while [ 1 ]; do
    read -p 'NET name    : ' NET

    ROOT=$(git rev-parse --show-toplevel)
    NUM="$ROOT/data/num/$NET.num"
    if [ ! -f "$NUM" ]; then
        echo "Expecting one of the following NETs:"
        for NET in $(find ${ROOT}/data/num -type f -name "*.num"); do
            echo "    $(basename $NET | sed 's:.num::')"
        done
    else
        break
    fi
done

VARIABLES=($(cat $ROOT/data/num/$NET.num))
echo -e "\n  ${#VARIABLES[@]} variables: ${VARIABLES[@]}\n"

# get number of partitions
while [ 1 ]; do
    read -p '#Partitions : ' PARTITIONS

    if [[ ! ${PARTITIONS} =~ ^[0-9]+$ ]] || [ $PARTITIONS -gt ${#VARIABLES[@]} ] || [ $PARTITIONS -le 1 ]; then
        echo "Expected value between 2-${#VARIABLES[@]}" 1>&2
    else
        break
    fi
done

# get partition sizes
while [ 1 ]; do
    read -p "Part. sizes : " K

    PARTSIZES=($K)
    if [ ${#PARTSIZES[@]} -ne $PARTITIONS ]; then
        echo "Expected $PARTITIONS space separated values that sum to ${#VARIABLES[@]} (got ${#PARTSIZES[@]} values)" 1>&2
    else
        SUM=0
        for ((i = 0; i < ${PARTITIONS}; i++)); do
            SUM=$(($SUM + ${PARTSIZES[$i]}))
        done
        if [ $SUM -ne ${#VARIABLES[@]} ]; then
            echo "Expected $PARTITIONS space separated values that sum to ${#VARIABLES[@]} (they now sum to $SUM)" 1>&2
        else
            break
        fi
    fi
done

DEST=$ROOT/tmp
mkdir -p $DEST

cp $ROOT/data/net/$NET.net $DEST
if [ ! $? ]; then
    echo "FATAL: $ROOT/data/net/$NET.net does not exist"
    exit 1
fi

# create partition files
echo "========================================================="
./scripts/gen-part-py $NET $PARTITIONS $K $SUBSETSIZE ${VARIABLES[@]}
echo "========================================================="

echo "How many partition files do you want to test?"
while [ 1 ]; do
    read NUM
    if ! [[ "$NUM" =~ ^[0-9]+$ ]]; then
        echo "Sorry, integers only"
    else
        break
    fi
done

./scripts/gen-circuits $NET $NUM
./scripts/gen-bnmc-input $NET $NUM
./scripts/run-circuits $NUM

