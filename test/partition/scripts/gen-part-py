#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import sys
import os
import itertools
import subprocess

LIMIT=100
net=sys.argv[1]
partitions=int(sys.argv[2])

print("Net        : ",net)
print("Partitions : ",partitions)

k = []
for i in range(0,partitions):
    k.append(int(sys.argv[3+i]))

print("Par. Sizes : ",k)
print("Par. Sum   : ",sum(k))

total_size = 0
for size in k:
    total_size += size

variables = set(sys.argv[3+partitions:])

print("Variables  : ",variables)

if total_size != len(variables):
    print("K sums to",total_size,"but there are only",len(variables),"variables\n")
    sys.exit(0)


permutations = 0
ROOT=subprocess.check_output(['git','rev-parse','--show-toplevel']).decode("utf-8").rstrip()
DEST="{0}/tmp".format(ROOT)

def write_permutation(combination):
    global permutations
    permutations = permutations +1
    if permutations > LIMIT:
        print("Limit of {0} reached..".format(LIMIT))
        sys.exit(0)

    FILENAME="{2}/{0}.{1}.part".format(net,permutations,DEST)

    file = open(FILENAME,'w')
    file.write("partition {0}\n".format(partitions))
    for partition in combination:
        file.write("{0}::\n".format(",".join(partition)))
    file.close()

    print("Permutation {0}: {1}".format(permutations,FILENAME))


def create_combination(combination=[set() for _ in range(partitions)],depth=0):
    if depth == partitions:
        write_permutation(combination)
    else:
        remainder = variables.copy()
        if depth > 0:
            remainder -= set.union(*combination[0:depth])

        for subset in map(set, itertools.combinations(remainder, k[depth])):
            combination[depth] = subset
            create_combination(combination,depth+1)

create_combination()

print("permutations:",permutations)

