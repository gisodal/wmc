#!/bin/bash

ROOT=$(git rev-parse --show-toplevel)
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

NET=$1
SOURCEHUGIN="$ROOT/data/net/${NET}.net"

if [ ! -f "$SOURCEHUGIN" ]; then
    echo "FATAL: BN '${NET}' does not exist. ($SOURCEHUGIN not found)"
    exit 1
fi

DEST=$ROOT/exp/output
mkdir -p $DEST

HUGIN="$DEST/${NET}.net"
cp $SOURCEHUGIN $HUGIN

SOURCEPART="$ROOT/data/part/${NET}.part"
PART="$DEST/${NET}.part"

NUM="$DEST/${NET}.num"
CIRCUIT="$DEST/${NET}.ac"
PARTCIRCUIT="$DEST/${NET}.0.ac"
BNC="$ROOT/bin/bnc"
COMPILER="$DIR/compile_wpbdd"
MAP="$DEST/${NET}.map"
INFERENCEINPUT="${DEST}/${NET}.bnmc"
INFERENCE="${ROOT}/bin/bnmc"
INFERENCEOUTPUT="${DEST}/${NET}.bnmc.out"

CALLER=$(ps -o comm=$PPID)
if [[ "$CALLER" != *"create_ordering"* ]]; then
    while [ ! -f "$NUM" ]; do
        read -p "Ordering not found. Create one (Y/n)? " -n 1 -r INPUT 2>&1; echo
        case "$INPUT" in
            y|Y|'' ) $DIR/create_ordering $NET; break ;;
            n|N ) break;;
        esac
    done
fi

function limit_time(){
    if [ $# -ge 2 ]; then
        perl -e 'alarm shift @ARGV; exec @ARGV' $1 ${@:2}
        if [[ $? -ne 0 ]]; then
            echo "Time limit of $1 reached or failed execution"
        fi
    else
        echo "Usage: time-limit <seconds> <command>" 1>&2
    fi
}

pause(){
    read -n1 -rsp $'Press any key to continue or Ctrl+C to exit...\n'
}

