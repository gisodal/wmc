// ~->[DNET-1]->~

// File created by Norsys using Netica 1.06b on Mar 29, 1998 at 05:04:04.

bnet Bouncing {
numdimensions = 1;
comment = "A time delay belief network for the position and velocity of \
	a frictionless 'ball' bouncing between 2 barriers.\n\
	From Brent Boerlage.";
author = "BoerlageB";
whenchanged = 891176635;

visual V1 {
	defdispform = BELIEFBARS;
	nodelabeling = TITLE;
	nodefont = font {shape= "Arial"; size= 10;};
	linkfont = font {shape= "Arial"; size= 9;};
	commentfont = font {shape= "Arial"; size= 10;};
	windowposn = (125, 13, 491, 467);
	resolution = 72;
	drawingbounds = (1104, 730);
	showpagebreaks = FALSE;
	usegrid = TRUE;
	gridspace = (6, 6);
	};

node x {
	kind = NATURE;
	discrete = FALSE;
	chance = CHANCE;
	levels = (0, 0, 2, 4, 6, 8, 10, 10);
	inputs = (x1, v1);
	parents = (x, v);
	probs = 
		// 0            0 to 2       2 to 4       4 to 6       6 to 8       8 to 10      10              // x1      v1        
		(((1,           0,           0,           0,           0,           0,           0),             // 0       -10 to -8 
		  (1,           0,           0,           0,           0,           0,           0),             // 0       -8 to -6  
		  (1,           0,           0,           0,           0,           0,           0),             // 0       -6 to -4  
		  (1,           0,           0,           0,           0,           0,           0),             // 0       -4 to -2  
		  (1,           0,           0,           0,           0,           0,           0),             // 0       -2 to 0   
		  (0,           1,           0,           0,           0,           0,           0),             // 0       0 to 2    
		  (0,           1,           0,           0,           0,           0,           0),             // 0       2 to 4    
		  (0,           1,           0,           0,           0,           0,           0),             // 0       4 to 6    
		  (0,           1,           0,           0,           0,           0,           0),             // 0       6 to 8    
		  (0,           1,           0,           0,           0,           0,           0)),            // 0       8 to 10   
		 ((0.54,        0.46,        0,           0,           0,           0,           0),             // 0 to 2  -10 to -8 
		  (0.29,        0.71,        0,           0,           0,           0,           0),             // 0 to 2  -8 to -6  
		  (0.26,        0.74,        0,           0,           0,           0,           0),             // 0 to 2  -6 to -4  
		  (0.09999996,  0.9,         0,           0,           0,           0,           0),             // 0 to 2  -4 to -2  
		  (0.04,        0.96,        0,           0,           0,           0,           0),             // 0 to 2  -2 to 0   
		  (0,           0.97,        0.03,        0,           0,           0,           0),             // 0 to 2  0 to 2    
		  (0,           0.88,        0.12,        0,           0,           0,           0),             // 0 to 2  2 to 4    
		  (0,           0.74,        0.26,        0,           0,           0,           0),             // 0 to 2  4 to 6    
		  (0,           0.57,        0.43,        0,           0,           0,           0),             // 0 to 2  6 to 8    
		  (0,           0.45,        0.55,        0,           0,           0,           0)),            // 0 to 2  8 to 10   
		 ((0,           0.35,        0.65,        0,           0,           0,           0),             // 2 to 4  -10 to -8 
		  (0,           0.29,        0.71,        0,           0,           0,           0),             // 2 to 4  -8 to -6  
		  (0,           0.31,        0.69,        0,           0,           0,           0),             // 2 to 4  -6 to -4  
		  (0,           0.12,        0.88,        0,           0,           0,           0),             // 2 to 4  -4 to -2  
		  (0,           0.02,        0.98,        0,           0,           0,           0),             // 2 to 4  -2 to 0   
		  (0,           0,           0.95,        0.05,        0,           0,           0),             // 2 to 4  0 to 2    
		  (0,           0,           0.86,        0.14,        0,           0,           0),             // 2 to 4  2 to 4    
		  (0,           0,           0.72,        0.28,        0,           0,           0),             // 2 to 4  4 to 6    
		  (0,           0,           0.64,        0.36,        0,           0,           0),             // 2 to 4  6 to 8    
		  (0,           0,           0.47,        0.53,        0,           0,           0)),            // 2 to 4  8 to 10   
		 ((0,           0,           0.47,        0.53,        0,           0,           0),             // 4 to 6  -10 to -8 
		  (0,           0,           0.26,        0.74,        0,           0,           0),             // 4 to 6  -8 to -6  
		  (0,           0,           0.19,        0.81,        0,           0,           0),             // 4 to 6  -6 to -4  
		  (0,           0,           0.11,        0.89,        0,           0,           0),             // 4 to 6  -4 to -2  
		  (0,           0,           0.05,        0.95,        0,           0,           0),             // 4 to 6  -2 to 0   
		  (0,           0,           0,           0.96,        0.04,        0,           0),             // 4 to 6  0 to 2    
		  (0,           0,           0,           0.86,        0.14,        0,           0),             // 4 to 6  2 to 4    
		  (0,           0,           0,           0.73,        0.27,        0,           0),             // 4 to 6  4 to 6    
		  (0,           0,           0,           0.59,        0.41,        0,           0),             // 4 to 6  6 to 8    
		  (0,           0,           0,           0.51,        0.49,        0,           0)),            // 4 to 6  8 to 10   
		 ((0,           0,           0,           0.5,         0.5,         0,           0),             // 6 to 8  -10 to -8 
		  (0,           0,           0,           0.37,        0.63,        0,           0),             // 6 to 8  -8 to -6  
		  (0,           0,           0,           0.25,        0.75,        0,           0),             // 6 to 8  -6 to -4  
		  (0,           0,           0,           0.11,        0.89,        0,           0),             // 6 to 8  -4 to -2  
		  (0,           0,           0,           0.06,        0.94,        0,           0),             // 6 to 8  -2 to 0   
		  (0,           0,           0,           0,           0.96,        0.04,        0),             // 6 to 8  0 to 2    
		  (0,           0,           0,           0,           0.79,        0.21,        0),             // 6 to 8  2 to 4    
		  (0,           0,           0,           0,           0.76,        0.24,        0),             // 6 to 8  4 to 6    
		  (0,           0,           0,           0,           0.63,        0.37,        0),             // 6 to 8  6 to 8    
		  (0,           0,           0,           0,           0.47,        0.53,        0)),            // 6 to 8  8 to 10   
		 ((0,           0,           0,           0,           0.41,        0.59,        0),             // 8 to 10 -10 to -8 
		  (0,           0,           0,           0,           0.35,        0.65,        0),             // 8 to 10 -8 to -6  
		  (0,           0,           0,           0,           0.35,        0.65,        0),             // 8 to 10 -6 to -4  
		  (0,           0,           0,           0,           0.16,        0.84,        0),             // 8 to 10 -4 to -2  
		  (0,           0,           0,           0,           0.04,        0.96,        0),             // 8 to 10 -2 to 0   
		  (0,           0,           0,           0,           0,           0.91,        0.08999994),    // 8 to 10 0 to 2    
		  (0,           0,           0,           0,           0,           0.85,        0.15),          // 8 to 10 2 to 4    
		  (0,           0,           0,           0,           0,           0.75,        0.25),          // 8 to 10 4 to 6    
		  (0,           0,           0,           0,           0,           0.69,        0.31),          // 8 to 10 6 to 8    
		  (0,           0,           0,           0,           0,           0.56,        0.44)),         // 8 to 10 8 to 10   
		 ((0,           0,           0,           0,           0,           1,           0),             // 10      -10 to -8 
		  (0,           0,           0,           0,           0,           1,           0),             // 10      -8 to -6  
		  (0,           0,           0,           0,           0,           1,           0),             // 10      -6 to -4  
		  (0,           0,           0,           0,           0,           1,           0),             // 10      -4 to -2  
		  (0,           0,           0,           0,           0,           1,           0),             // 10      -2 to 0   
		  (0,           0,           0,           0,           0,           0,           1),             // 10      0 to 2    
		  (0,           0,           0,           0,           0,           0,           1),             // 10      2 to 4    
		  (0,           0,           0,           0,           0,           0,           1),             // 10      4 to 6    
		  (0,           0,           0,           0,           0,           0,           1),             // 10      6 to 8    
		  (0,           0,           0,           0,           0,           0,           1)));           // 10      8 to 10   ;
	equation = "x (x1, v1) = clip (0, 10, x1 + c * v1)";
	delays = (
		(1),
		(1));
	title = "Position";
	comment = "Position of object bouncing back and forth between two \
		walls with no energy loss.\n\
		The levels discretization has two endpoint states that \
		indicate a bounce is occuring, for the velocity to reverse.";
	whenchanged = 891176635;
	visual V1 {
		center = (132, 93);
		height = 2;
		link 1 {
			path = ((206, 74), (234, 66), (234, 108), (206, 103));
			};
		link 2 {
			path = ((210, 208), (234, 180), (206, 155));
			};
		};
	};

node v {
	kind = NATURE;
	discrete = FALSE;
	chance = CHANCE;
	levels = (-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10);
	inputs = (v1, x1);
	parents = (v, x);
	probs = 
		// -10 to -8    -8 to -6     -6 to -4     -4 to -2     -2 to 0      0 to 2       2 to 4       4 to 6       6 to 8       8 to 10         // v1        x1      
		(((0,           0,           0,           0,           0,           0,           0,           0,           0,           1),             // -10 to -8 0       
		  (1,           0,           0,           0,           0,           0,           0,           0,           0,           0),             // -10 to -8 0 to 2  
		  (1,           0,           0,           0,           0,           0,           0,           0,           0,           0),             // -10 to -8 2 to 4  
		  (1,           0,           0,           0,           0,           0,           0,           0,           0,           0),             // -10 to -8 4 to 6  
		  (1,           0,           0,           0,           0,           0,           0,           0,           0,           0),             // -10 to -8 6 to 8  
		  (1,           0,           0,           0,           0,           0,           0,           0,           0,           0),             // -10 to -8 8 to 10 
		  (1,           0,           0,           0,           0,           0,           0,           0,           0,           0)),            // -10 to -8 10      
		 ((0,           0,           0,           0,           0,           0,           0,           0,           1,           0),             // -8 to -6  0       
		  (0,           1,           0,           0,           0,           0,           0,           0,           0,           0),             // -8 to -6  0 to 2  
		  (0,           1,           0,           0,           0,           0,           0,           0,           0,           0),             // -8 to -6  2 to 4  
		  (0,           1,           0,           0,           0,           0,           0,           0,           0,           0),             // -8 to -6  4 to 6  
		  (0,           1,           0,           0,           0,           0,           0,           0,           0,           0),             // -8 to -6  6 to 8  
		  (0,           1,           0,           0,           0,           0,           0,           0,           0,           0),             // -8 to -6  8 to 10 
		  (0,           1,           0,           0,           0,           0,           0,           0,           0,           0)),            // -8 to -6  10      
		 ((0,           0,           0,           0,           0,           0,           0,           1,           0,           0),             // -6 to -4  0       
		  (0,           0,           1,           0,           0,           0,           0,           0,           0,           0),             // -6 to -4  0 to 2  
		  (0,           0,           1,           0,           0,           0,           0,           0,           0,           0),             // -6 to -4  2 to 4  
		  (0,           0,           1,           0,           0,           0,           0,           0,           0,           0),             // -6 to -4  4 to 6  
		  (0,           0,           1,           0,           0,           0,           0,           0,           0,           0),             // -6 to -4  6 to 8  
		  (0,           0,           1,           0,           0,           0,           0,           0,           0,           0),             // -6 to -4  8 to 10 
		  (0,           0,           1,           0,           0,           0,           0,           0,           0,           0)),            // -6 to -4  10      
		 ((0,           0,           0,           0,           0,           0,           1,           0,           0,           0),             // -4 to -2  0       
		  (0,           0,           0,           1,           0,           0,           0,           0,           0,           0),             // -4 to -2  0 to 2  
		  (0,           0,           0,           1,           0,           0,           0,           0,           0,           0),             // -4 to -2  2 to 4  
		  (0,           0,           0,           1,           0,           0,           0,           0,           0,           0),             // -4 to -2  4 to 6  
		  (0,           0,           0,           1,           0,           0,           0,           0,           0,           0),             // -4 to -2  6 to 8  
		  (0,           0,           0,           1,           0,           0,           0,           0,           0,           0),             // -4 to -2  8 to 10 
		  (0,           0,           0,           1,           0,           0,           0,           0,           0,           0)),            // -4 to -2  10      
		 ((0,           0,           0,           0,           0,           1,           0,           0,           0,           0),             // -2 to 0   0       
		  (0,           0,           0,           0,           1,           0,           0,           0,           0,           0),             // -2 to 0   0 to 2  
		  (0,           0,           0,           0,           1,           0,           0,           0,           0,           0),             // -2 to 0   2 to 4  
		  (0,           0,           0,           0,           1,           0,           0,           0,           0,           0),             // -2 to 0   4 to 6  
		  (0,           0,           0,           0,           1,           0,           0,           0,           0,           0),             // -2 to 0   6 to 8  
		  (0,           0,           0,           0,           1,           0,           0,           0,           0,           0),             // -2 to 0   8 to 10 
		  (0,           0,           0,           0,           1,           0,           0,           0,           0,           0)),            // -2 to 0   10      
		 ((0,           0,           0,           0,           0,           1,           0,           0,           0,           0),             // 0 to 2    0       
		  (0,           0,           0,           0,           0,           1,           0,           0,           0,           0),             // 0 to 2    0 to 2  
		  (0,           0,           0,           0,           0,           1,           0,           0,           0,           0),             // 0 to 2    2 to 4  
		  (0,           0,           0,           0,           0,           1,           0,           0,           0,           0),             // 0 to 2    4 to 6  
		  (0,           0,           0,           0,           0,           1,           0,           0,           0,           0),             // 0 to 2    6 to 8  
		  (0,           0,           0,           0,           0,           1,           0,           0,           0,           0),             // 0 to 2    8 to 10 
		  (0,           0,           0,           0,           1,           0,           0,           0,           0,           0)),            // 0 to 2    10      
		 ((0,           0,           0,           0,           0,           0,           1,           0,           0,           0),             // 2 to 4    0       
		  (0,           0,           0,           0,           0,           0,           1,           0,           0,           0),             // 2 to 4    0 to 2  
		  (0,           0,           0,           0,           0,           0,           1,           0,           0,           0),             // 2 to 4    2 to 4  
		  (0,           0,           0,           0,           0,           0,           1,           0,           0,           0),             // 2 to 4    4 to 6  
		  (0,           0,           0,           0,           0,           0,           1,           0,           0,           0),             // 2 to 4    6 to 8  
		  (0,           0,           0,           0,           0,           0,           1,           0,           0,           0),             // 2 to 4    8 to 10 
		  (0,           0,           0,           1,           0,           0,           0,           0,           0,           0)),            // 2 to 4    10      
		 ((0,           0,           0,           0,           0,           0,           0,           1,           0,           0),             // 4 to 6    0       
		  (0,           0,           0,           0,           0,           0,           0,           1,           0,           0),             // 4 to 6    0 to 2  
		  (0,           0,           0,           0,           0,           0,           0,           1,           0,           0),             // 4 to 6    2 to 4  
		  (0,           0,           0,           0,           0,           0,           0,           1,           0,           0),             // 4 to 6    4 to 6  
		  (0,           0,           0,           0,           0,           0,           0,           1,           0,           0),             // 4 to 6    6 to 8  
		  (0,           0,           0,           0,           0,           0,           0,           1,           0,           0),             // 4 to 6    8 to 10 
		  (0,           0,           1,           0,           0,           0,           0,           0,           0,           0)),            // 4 to 6    10      
		 ((0,           0,           0,           0,           0,           0,           0,           0,           1,           0),             // 6 to 8    0       
		  (0,           0,           0,           0,           0,           0,           0,           0,           1,           0),             // 6 to 8    0 to 2  
		  (0,           0,           0,           0,           0,           0,           0,           0,           1,           0),             // 6 to 8    2 to 4  
		  (0,           0,           0,           0,           0,           0,           0,           0,           1,           0),             // 6 to 8    4 to 6  
		  (0,           0,           0,           0,           0,           0,           0,           0,           1,           0),             // 6 to 8    6 to 8  
		  (0,           0,           0,           0,           0,           0,           0,           0,           1,           0),             // 6 to 8    8 to 10 
		  (0,           1,           0,           0,           0,           0,           0,           0,           0,           0)),            // 6 to 8    10      
		 ((0,           0,           0,           0,           0,           0,           0,           0,           0,           1),             // 8 to 10   0       
		  (0,           0,           0,           0,           0,           0,           0,           0,           0,           1),             // 8 to 10   0 to 2  
		  (0,           0,           0,           0,           0,           0,           0,           0,           0,           1),             // 8 to 10   2 to 4  
		  (0,           0,           0,           0,           0,           0,           0,           0,           0,           1),             // 8 to 10   4 to 6  
		  (0,           0,           0,           0,           0,           0,           0,           0,           0,           1),             // 8 to 10   6 to 8  
		  (0,           0,           0,           0,           0,           0,           0,           0,           0,           1),             // 8 to 10   8 to 10 
		  (1,           0,           0,           0,           0,           0,           0,           0,           0,           0)));           // 8 to 10   10      ;
	equation = "v (x1, v1) =\n\
		\|    (x1 == 0  &&  v1 < 0  ||  x1 == 10  &&  v1 > 0) ? \n\
		\|    -v1 : v1";
	delays = (
		(1),
		(0));
	title = "Velocity";
	visual V1 {
		center = (132, 294);
		height = 3;
		link 1 {
			path = ((210, 276), (234, 270), (234, 318), (210, 312));
			};
		};
	};

node c {
	kind = ASSUME;
	discrete = FALSE;
	chance = CHANCE;
	parents = ();
	value = 0.1;
	visual V1 {
		center = (18, 36);
		height = 1;
		};
	};
};
